datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                    String  @id @default(cuid())
  userId                String  @map("user_id")
  type                  String
  provider              String
  providerAccountId     String  @map("provider_account_id")
  refresh_token         String?
  refreshTokenExpiresIn Int?    @map("refresh_token_expires_in")
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  posts      Post[]
  comments   Comment[]
  votes      Vote[]
  workspaces WorkspaceUsers[]

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  owner
  member
}

model Workspace {
  id   String  @id @default(cuid())
  name String
  slug String  @unique
  logo String?

  usersLimit Int               @default(1) @map("users_limit")
  invite     WorkspaceInvite[]
  users      WorkspaceUsers[]
  projects   Project[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("workspaces")
}

model WorkspaceInvite {
  email       String
  expires     DateTime
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspace_id")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@unique([email, workspaceId])
  @@index([workspaceId])
  @@map("workspaces_invites")
}

model WorkspaceUsers {
  id   String @id @default(cuid())
  role Role   @default(member)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspace_id")

  @@unique([userId, workspaceId])
  @@index([workspaceId])
  @@map("workspaces_users")
}

model Project {
  id   String @id @default(cuid())
  name String

  private Boolean @default(false)

  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?    @map("workspace_id")
  boards      Board[]

  @@map("projects")
}

model Board {
  id   String @id @default(cuid())
  name String
  url  String

  posts      Post[]
  project    Project?      @relation(fields: [projectId], references: [id])
  projectId  String?       @map("project_id")
  settings   BoardSettings @relation(fields: [settingsId], references: [id])
  settingsId String        @map("settings_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt() @map("updated_at")

  @@map("boards")
}

model BoardSettings {
  id String @id() @default(cuid())

  private       Boolean @default(false)
  anonymousUser Boolean @default(true) @map("anonymoues_user")

  Board Board[]

  @@map("boards_settings")
}

enum Status {
  open
  under_review
  planned
  in_progress
  complete
  closed
}

model Post {
  id      String  @id() @default(cuid())
  title   String
  content String?
  status  Status  @default(open)

  author   User?  @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  comments Comment[]
  votes    Vote[]

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt() @map("updated_at")
  publishedAt DateTime? @default(now()) @map("published_at")
  published   Boolean   @default(false)

  board   Board  @relation(fields: [boardId], references: [id])
  boardId String @map("board_id")

  @@map("posts")
}

model Comment {
  id String @id() @default(cuid())

  content String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  post   Post   @relation(fields: [postId], references: [id])
  postId String @map("post_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt() @map("updated_at")

  @@map("comments")
}

model Vote {
  id     String @id() @default(cuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String @map("post_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt() @map("updated_at")

  @@map("votes")
}
